node("usine") {
    stage("checkout") {
        checkout scm
    }

    stage("build & QA Scan") {
        parallel 'build':{   
          withEnv(["JAVA_HOME=${ tool 'JDK_8.0' }", "PATH+MAVEN=${tool 'M325'}/bin:${env.JAVA_HOME}/bin"]) {        
            sh "mvn clean package"
          }
          stash includes: "target/app.jar", name: 'binary'
        }, 'QA Scan':{
            def scannerHome = tool 'sonar-scanner'; 
            withSonarQubeEnv('sonarqube-rec') {
                withEnv(["JAVA_HOME=${ tool 'JDK_8.0' }", "PATH+MAVEN=${tool 'M325'}/bin:${env.JAVA_HOME}/bin"]) {        
                // requires SonarQube Scanner for Maven 3.2+
                sh 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.2:sonar'
                stash includes: "target/sonar/report-task.txt", name: 'sonar'
				}
            }
        }
    }

    stage("Quality Gate"){
        unstash 'sonar'
        def props = getProperties("target/sonar/report-task.txt")
        echo "properties=${props}"
        def sonarServerUrl=props.getProperty('serverUrl')
        def ceTaskUrl= props.getProperty('ceTaskUrl')
        def ceTask
        waitUntil {
            ceTask = jsonParse(new URL(ceTaskUrl))
            def analysisStatus = ceTask["task"]["status"]
            echo "analysisStatus=${analysisStatus}"
            return "SUCCESS".equals(analysisStatus)
        }
        def analysisId = ceTask["task"]["analysisId"]
        echo "analysisId=${analysisId}"
        def qualitygate =  jsonParse(new URL(sonarServerUrl + "/api/qualitygates/project_status?analysisId=" + analysisId ))
        def qualitygateStatus = qualitygate["projectStatus"]["status"]
        echo "qualitygateStatus=${qualitygateStatus}"
        if ("ERROR".equals(qualitygateStatus)) {
            error  "Quality Gate failure"
        }

    }
    
    stage('approve') {
        timeout(time: 1, unit: 'MINUTES') {
            input message: 'Do you want to continue?'
        }
    }
}

node("docker") {
    docker.withServer('tcp://127.0.0.1:2375') {
        stage("Build docker image") {
            unstash 'binary'
            def myEnv = docker.build 'generali-spring-boot-demo:snapshot'
        }

        stage("Run container") {
            timeout(time: 1, unit: 'MINUTES') {
                input message: 'Do you want to test image?'
            }
            docker.image('generali-spring-boot-demo:snapshot').withRun('-p 8080:8080') {c ->
                sh "docker logs ${c.id}"
                timeout(1) {
                    input 'Stop container?'
                }
            }
        }
    }
}

def Properties getProperties(filename) {
    def properties = new Properties()
    properties.load(new StringReader(readFile(filename)))
    return properties
}

@NonCPS
def jsonParse(URL url) {
    new groovy.json.JsonSlurperClassic().parse(url)
}